#line 1 "SrvLexer.cpp"

#line 3 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
#define yy_create_buffer dibbler__create_buffer
#define yy_delete_buffer dibbler__delete_buffer
#define yy_scan_buffer dibbler__scan_buffer
#define yy_scan_string dibbler__scan_string
#define yy_scan_bytes dibbler__scan_bytes
#define yy_init_buffer dibbler__init_buffer
#define yy_flush_buffer dibbler__flush_buffer
#define yy_load_buffer_state dibbler__load_buffer_state
#define yy_switch_to_buffer dibbler__switch_to_buffer
#define yypush_buffer_state dibbler_push_buffer_state
#define yypop_buffer_state dibbler_pop_buffer_state
#define yyensure_buffer_stack dibbler_ensure_buffer_stack
#define yy_flex_debug dibbler__flex_debug
#define yyin dibbler_in
#define yyleng dibbler_leng
#define yylex dibbler_lex
#define yylineno dibbler_lineno
#define yyout dibbler_out
#define yyrestart dibbler_restart
#define yytext dibbler_text
#define yywrap dibbler_wrap
#define yyalloc dibbler_alloc
#define yyrealloc dibbler_realloc
#define yyfree dibbler_free

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
#ifdef yy_create_buffer
#define dibbler__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer dibbler__create_buffer
#endif

#ifdef yy_delete_buffer
#define dibbler__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer dibbler__delete_buffer
#endif

#ifdef yy_scan_buffer
#define dibbler__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer dibbler__scan_buffer
#endif

#ifdef yy_scan_string
#define dibbler__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string dibbler__scan_string
#endif

#ifdef yy_scan_bytes
#define dibbler__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes dibbler__scan_bytes
#endif

#ifdef yy_init_buffer
#define dibbler__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer dibbler__init_buffer
#endif

#ifdef yy_flush_buffer
#define dibbler__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer dibbler__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define dibbler__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state dibbler__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define dibbler__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer dibbler__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define dibbler_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state dibbler_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define dibbler_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state dibbler_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define dibbler_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack dibbler_ensure_buffer_stack
#endif

#ifdef yylex
#define dibbler_lex_ALREADY_DEFINED
#else
#define yylex dibbler_lex
#endif

#ifdef yyrestart
#define dibbler_restart_ALREADY_DEFINED
#else
#define yyrestart dibbler_restart
#endif

#ifdef yylex_init
#define dibbler_lex_init_ALREADY_DEFINED
#else
#define yylex_init dibbler_lex_init
#endif

#ifdef yylex_init_extra
#define dibbler_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra dibbler_lex_init_extra
#endif

#ifdef yylex_destroy
#define dibbler_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy dibbler_lex_destroy
#endif

#ifdef yyget_debug
#define dibbler_get_debug_ALREADY_DEFINED
#else
#define yyget_debug dibbler_get_debug
#endif

#ifdef yyset_debug
#define dibbler_set_debug_ALREADY_DEFINED
#else
#define yyset_debug dibbler_set_debug
#endif

#ifdef yyget_extra
#define dibbler_get_extra_ALREADY_DEFINED
#else
#define yyget_extra dibbler_get_extra
#endif

#ifdef yyset_extra
#define dibbler_set_extra_ALREADY_DEFINED
#else
#define yyset_extra dibbler_set_extra
#endif

#ifdef yyget_in
#define dibbler_get_in_ALREADY_DEFINED
#else
#define yyget_in dibbler_get_in
#endif

#ifdef yyset_in
#define dibbler_set_in_ALREADY_DEFINED
#else
#define yyset_in dibbler_set_in
#endif

#ifdef yyget_out
#define dibbler_get_out_ALREADY_DEFINED
#else
#define yyget_out dibbler_get_out
#endif

#ifdef yyset_out
#define dibbler_set_out_ALREADY_DEFINED
#else
#define yyset_out dibbler_set_out
#endif

#ifdef yyget_leng
#define dibbler_get_leng_ALREADY_DEFINED
#else
#define yyget_leng dibbler_get_leng
#endif

#ifdef yyget_text
#define dibbler_get_text_ALREADY_DEFINED
#else
#define yyget_text dibbler_get_text
#endif

#ifdef yyget_lineno
#define dibbler_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno dibbler_get_lineno
#endif

#ifdef yyset_lineno
#define dibbler_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno dibbler_set_lineno
#endif

#ifdef yywrap
#define dibbler_wrap_ALREADY_DEFINED
#else
#define yywrap dibbler_wrap
#endif

/* %endif */

#ifdef yyalloc
#define dibbler_alloc_ALREADY_DEFINED
#else
#define yyalloc dibbler_alloc
#endif

#ifdef yyrealloc
#define dibbler_realloc_ALREADY_DEFINED
#else
#define yyrealloc dibbler_realloc
#endif

#ifdef yyfree
#define dibbler_free_ALREADY_DEFINED
#else
#define yyfree dibbler_free
#endif

/* %if-c-only */

#ifdef yytext
#define dibbler_text_ALREADY_DEFINED
#else
#define yytext dibbler_text
#endif

#ifdef yyleng
#define dibbler_leng_ALREADY_DEFINED
#else
#define yyleng dibbler_leng
#endif

#ifdef yyin
#define dibbler_in_ALREADY_DEFINED
#else
#define yyin dibbler_in
#endif

#ifdef yyout
#define dibbler_out_ALREADY_DEFINED
#else
#define yyout dibbler_out
#endif

#ifdef yy_flex_debug
#define dibbler__flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug dibbler__flex_debug
#endif

#ifdef yylineno
#define dibbler_lineno_ALREADY_DEFINED
#else
#define yylineno dibbler_lineno
#endif

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define dibbler_wrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 139
#define YY_END_OF_BUFFER 140
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1117] =
    {   0,
        1,    1,    0,    0,  140,  138,    2,    1,    1,  138,
      120,  138,  138,  137,  137,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  124,  124,    1,    1,    1,    0,  132,  120,
        0,  132,  122,  121,  137,    0,    0,  136,    0,  129,
      102,  133,  133,  133,   17,   18,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  117,  133,  133,

      104,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  123,  121,  137,    0,    0,    0,  128,  134,
      127,  127,  133,  133,  133,  133,  133,  133,  103,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,   95,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  116,  137,    0,    0,

        0,    0,  126,  126,    0,  127,    0,  127,  133,  133,
      133,   68,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  110,  133,  133,  133,  133,   32,  133,  133,   48,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,    0,  133,  133,  133,  133,  133,  133,
      133,   25,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  118,
      133,  133,  133,  133,  137,    0,  135,    0,    0,    0,
      126,    0,  126,    0,  127,  127,  127,  127,  133,  133,
      133,  133,  133,  109,  133,  133,  133,    4,  133,  133,

      133,  133,  133,  133,  133,  133,  119,  133,   99,  133,
      133,    3,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,    0,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,    7,  133,
       47,  133,  133,   26,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,    0,    0,    0,    0,
        0,  126,  126,  126,  126,    0,  127,  127,  127,    0,
      127,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,   31,  133,  133,  133,  133,  133,   40,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,

      133,  133,  133,  133,  133,  133,  133,  133,    0,    0,
      133,  133,  133,   38,  133,  133,  133,  133,  133,   36,
      133,  133,  133,  133,   64,   96,  133,  133,  133,  113,
       46,  133,  133,  133,  133,  133,  133,  133,    0,    0,
        0,    0,  126,  126,  126,    0,  126,    0,    0,  127,
      127,  127,  127,  133,  133,   35,  133,  133,  133,  133,
      133,  133,  133,  133,    0,  133,  133,  112,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,    0,    0,  133,  133,  133,  133,  133,   62,  133,

      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,   23,  133,  133,  133,  135,    0,    0,    0,
        0,    0,  126,  126,  126,  126,    0,  127,  127,  127,
        0,  127,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,    0,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,   84,  133,  133,  133,   49,  133,   58,  133,  133,
      133,   12,   10,  101,  133,   45,    0,    0,  133,  133,
      133,   60,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,    5,  133,  133,  133,   14,

        0,    0,    0,    0,  126,  126,  126,    0,  126,  131,
      127,  127,  127,  127,  133,  133,  133,  133,  133,   97,
      133,  133,  133,  133,  133,  133,  133,  133,  133,    0,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,   86,  133,  133,  133,  133,  133,  133,
      133,  133,   11,   67,    0,    0,  133,  133,  133,   61,
      133,  133,  133,  133,  133,  133,  133,   33,  133,  133,
        6,  111,   42,  133,  133,    0,    0,    0,    0,  130,
      126,  126,  126,  126,  127,  127,  127,    0,  127,  133,
      133,  133,  133,  133,  133,  133,  133,   78,  133,  133,

      133,   59,  133,    0,  133,  133,  133,  133,  133,  133,
      133,  133,   39,  133,  133,  133,   37,  133,  133,  133,
      133,  133,  133,  133,   34,   13,    0,    0,   55,   54,
       41,  133,  133,   24,  133,  133,  133,  133,   44,   43,
      133,  133,  135,    0,    0,  126,  126,  126,    0,  126,
      127,  127,  127,  127,  133,   15,  133,   66,  133,  133,
      133,  133,   77,  133,  133,  133,    0,  133,  133,  133,
      133,  133,  133,   81,  133,  133,  133,  133,   88,   90,
       92,   94,  133,  133,  133,   57,   56,  133,  133,  133,
      133,  133,  133,  133,   63,    0,    0,    0,    0,  126,

      126,  126,  126,  127,  127,  127,    0,  127,  133,  133,
      114,  133,   79,  133,  133,  133,  133,    0,  100,  133,
      133,  133,   53,  133,   82,   22,   65,  133,  133,  133,
        8,  133,  133,  133,   27,  133,  133,  133,    0,    0,
        0,  126,  126,  126,    0,  126,  127,  127,  127,  127,
      133,  133,  133,   75,   80,  133,  133,    0,  133,  133,
       52,  133,  133,  133,  133,   69,  133,  133,  133,  133,
      133,  133,  133,  135,    0,    0,    0,  126,  126,  126,
      126,  127,  127,  127,    0,  127,  133,  133,   76,  133,
      133,    0,  133,  133,  133,  133,  133,  133,  133,  133,

      133,  133,  133,   16,   21,    0,    0,  125,  128,  126,
      126,  126,    0,  126,  127,  127,  127,  127,  133,  133,
      133,   29,    0,    0,  133,  133,  133,   83,  133,  133,
       28,  133,  133,  133,  133,  133,    0,    0,  125,    0,
      126,  126,  126,  126,  126,  127,  127,  127,    0,  127,
      133,  133,  133,    0,    0,   30,  133,  133,   85,  133,
      133,  133,  133,  133,  115,  133,  133,  133,  135,  125,
      128,  126,    0,  126,  126,  126,  126,  127,  127,  127,
       70,  133,  133,  133,  133,    0,    0,  133,  133,  133,
      133,  133,  133,   51,  133,   20,  133,  133,    0,  125,

      126,  126,  126,  126,  127,  127,  127,  133,  133,  133,
      133,  133,    0,    0,  133,  133,   87,   89,   91,   93,
        9,   19,  133,    0,  126,  126,    0,  126,  126,  127,
       50,  133,  133,  133,  133,    0,    0,  133,  133,   98,
      135,  126,  126,  127,  133,  133,  133,  133,    0,    0,
        0,  133,  133,  133,    0,  126,  126,    0,  133,  133,
      133,  133,    0,    0,    0,  105,  133,  133,  133,  105,
      125,  126,  126,   71,  133,  133,  133,    0,  107,    0,
      133,  107,  133,  125,  126,  126,    0,  133,  133,   74,
        0,  106,  133,  106,    0,  126,  126,  133,   72,  108,

      108,    0,  126,  126,    0,   73,  135,  126,  126,    0,
      126,  126,    0,  126,  126,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   24,   24,   24,   24,   24,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   26,   25,   25,   25,   25,   25,   25,
        1,    1,    1,    1,    1,    1,   27,   28,   29,   30,

       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[53] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        3,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    5,    1,    6,    1,    1,    6,    6,    6,    6,
        6,    6,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1
    } ;

static const flex_int16_t yy_base[1255] =
    {   0,
        0,    0, 2655, 2654, 2661, 2664, 2664,   50,   52, 2655,
        0, 2652,   49,   49, 2608, 2635, 2633,   90,  130,   44,
       55, 2608,   48,  135, 2604,   45, 2606, 2613,   42, 2620,
       55, 2623,  132,  111,  150,  156,  155,  161, 2609,   67,
     2607, 2616, 2664, 2634,  165,  168,  189, 2640, 2664,    0,
     2637, 2636, 2664,    0,  193, 2620,  215, 2664,    0,  224,
     2664,    0,  244,    0,    0,    0, 2612, 2610, 2593,  162,
     2608, 2591, 2598, 2606,  150, 2594, 2593, 2592, 2598, 2585,
     2590, 2587, 2592, 2584, 2587, 2594, 2593, 2591, 2594, 2593,
      172, 2568,  237, 2585, 2571,  232, 2571,    0, 2573, 2568,

        0, 2603, 2568, 2570, 2579, 2567,  249, 2561, 2563, 2577,
     2578, 2562,  252, 2575, 2592, 2562, 2553, 2564, 2560, 2557,
     2552, 2550, 2664,    0,  284, 2572,  306, 2571,  315,    0,
      337, 2570,  357, 2560, 2546, 2545, 2547, 2546,    0, 2552,
     2548, 2550, 2538, 2551, 2535, 2535, 2528, 2547, 2567, 2549,
     2533, 2544, 2542, 2527, 2531, 2537, 2524, 2539, 2538, 2537,
     2530, 2533,    0, 2532, 2525, 2551, 2531, 2526, 2512,  237,
     2547, 2521,  251, 2523, 2516, 2521, 2517, 2510, 2519, 2522,
     2507, 2501, 2511, 2501, 2500, 2533, 2496, 2506,  158, 2511,
     2508, 2507, 2508, 2501, 2505, 2497,    0,  377,  399, 2511,

     2510, 2509,  410, 2508,    0,  432,  452, 2507,  472, 2486,
      239,    0, 2483, 2477, 2515, 2514, 2492, 2477, 2481, 2493,
     2509,    0, 2473, 2472, 2481, 2505,    0, 2470, 2482, 2502,
     2480, 2465, 2499, 2477, 2461, 2466, 2461, 2458, 2493,  252,
     2468, 2467, 2490, 2489,  264, 2453, 2456, 2458, 2464, 2453,
     2452,    0,  306, 2462, 2451, 2461, 2438, 2442, 2456, 2444,
     2454, 2453,  265, 2452, 2442, 2450, 2434, 2441, 2468,    0,
     2450, 2446, 2434, 2464, 2451, 2450, 2449, 2448, 2447,    0,
      494,  514, 2446, 2456,  536, 2444,  558, 2443, 2442, 2417,
     2420, 2416, 2425,    0,  554, 2421, 2448, 2447, 2410, 2420,

      337, 2408, 2422, 2412, 2404, 2415,    0, 2419,    0, 2438,
       52, 2437, 2411, 2410, 2412, 2408, 2404, 2400, 2409, 2398,
     2411, 2427, 2408, 2401,  554, 2393, 2402, 2401, 2391, 2403,
     2389, 2387, 2383, 2382, 2375, 2414, 2391, 2376,    0, 2390,
        0, 2374, 2373,    0, 2377, 2386, 2378, 2382, 2368, 2369,
     2385, 2359, 2365, 2399, 2364, 2377, 2384, 2383, 2382, 2381,
     2391,  589, 2379,  611, 2378,    0,  327, 2377,  633,  653,
     2376, 2387, 2369, 2350, 2348, 2355, 2361, 2347, 2359, 2358,
     2343, 2348,  685, 2346, 2341, 2349, 2373, 2338,    0, 2341,
     2341, 2349, 2339, 2347, 2342, 2336, 2326, 2327, 2345, 2332,

     2329, 2331, 2320, 2337, 2327, 2330, 2323, 2322, 2321, 2330,
     2321, 2315, 2314,    0, 2312, 2323, 2317, 2315,  391,    0,
     2324, 2317, 2341, 2340,    0,    0, 2310, 2304, 2316,    0,
        0, 2311, 2300, 2303, 2297, 2304, 2331, 2305, 2317, 2316,
     2315,    0,  422, 2314,  698,  718, 2313, 2323,  484,  740,
     2311,  762, 2310,  554, 2287, 2320, 2295, 2295, 2281, 2285,
      661, 2298, 2289, 2296, 2274,  756, 2273,    0, 2279, 2280,
      763, 2270, 2282, 2285, 2275, 2273, 2295, 2285, 2284, 2279,
     2278, 2279, 2276, 2277, 2264, 2273, 2272, 2271, 2269, 2256,
     2257, 2259, 2253, 2269, 2247, 2246, 2248, 2246,    0, 2264,

      186, 2259, 2248, 2255, 2258, 2251, 2258, 2236, 2238, 2242,
     2236, 2240,    0, 2244, 2233, 2233, 2254, 2253, 2252, 2251,
     2261,  526,  795, 2249,  817, 2248,    0, 2247, 2246,  839,
      859, 2245, 2235, 2225, 2224, 2236, 2224, 2222, 2219, 2225,
     2212, 2219, 2218, 2208, 2209, 2201, 2202, 2220, 2212, 2222,
     2217, 2201, 2215, 2206, 2203, 2205, 2211, 2212, 2200, 2194,
     2208,    0,  684, 2187, 2226,    0, 2204,    0, 2207, 2189,
     2194,    0,    0,    0, 2186,    0, 2203, 2181, 2193, 2196,
     2195,    0, 2191, 2184, 2213, 2193, 2191, 2181, 2172, 2180,
     2187, 2181, 2184, 2169, 2180,    0, 2181, 2179, 2168,    0,

     2187, 2186, 2185,    0, 2184, 2183,  881,  901, 2182,    0,
      923, 2181,  945, 2180, 2174, 2162, 2162, 2159, 2162,    0,
     2152, 2154, 2153, 2154, 2165, 2156, 2159, 2158, 2178, 2147,
     2159, 2135, 2144, 2138, 2126, 2134, 2109, 2104, 2066, 2077,
     2055, 2088, 2055,    0,  268, 2059, 2063, 2064, 2023, 2046,
     2015, 1993,    0,    0, 2000, 1980,   20,   69,  112,    0,
      145,  181,  219,  274,  268,  273,  305,    0,  320,  318,
        0,    0,    0,  332,  349,  360,  378,  380,  381,    0,
      967,  388,  989,  414,  433,  435, 1011, 1031,  436,  429,
      424,  437,  433,  449,  462,  468,  488,    0,  468,  476,

      493,    0,  501,  510,  514,  551,  532,  541,  536,  562,
      563,  562,    0,  567,  587,  588,    0,  606,  615,  619,
      622,  607,  615,  623,    0,    0,  619,  631,    0,    0,
        0,  645,  643,    0,  641,  661,  670,  674,    0,    0,
      660,  681,  699,  701,  702,  718,  719, 1053, 1073,  721,
     1095,  722, 1117,  730,  732,    0,  724,    0,  720,  728,
      742,  747,    0,  765,  751,  768,  759,  756,  764,  766,
      777,  774,  811,    0,  789,  794,  804,  813,    0,    0,
        0,    0,  820,  832,  834, 2664, 2664,  855,  849,  847,
      838,  875,  853,  869,    0,  884,  885,  901,  902, 1139,

      904, 1161,  905,  913,  924, 1183, 1203,  926,  906,  908,
        0,  934,    0,  932,  941,  948,  963,  948,    0,  962,
      957,  974,    0, 1197,    0,    0,    0,  984,  988,  992,
     1024,  997, 1006, 1021,    0, 1023, 1010, 1018, 1043, 1054,
     1056, 1057, 1073, 1232, 1252, 1074, 1274, 1076, 1296, 1077,
     1060, 1078, 1081,    0,    0, 1077, 1084, 1130, 1115, 1133,
        0, 1121, 1128, 1120, 1120,    0, 1132, 1143, 1140, 1156,
     1155, 1161, 1177, 1187, 1203, 1204, 1206, 1318, 1207, 1340,
     1215, 1216, 1217, 1362, 1382, 1218, 1210, 1234,    0, 1204,
     1226, 1229, 1230, 1359, 1259, 1251, 1255, 1266, 1255, 1270,

     1273, 1273, 1294,    0,    0, 1300, 1308, 1319,    0, 1321,
     1322, 1404, 1424, 1330, 1446, 1341, 1468, 1343, 1322, 1342,
     1375,    0, 1349, 1363, 1376, 1370, 1374,    0, 1487, 1382,
        0, 1399, 1399, 1407, 1412, 1421, 1428, 1436, 1447, 1449,
     1450, 1495, 1458, 1517,    0, 1469, 1471, 1539,    0, 1472,
     1453, 1464, 1535, 1491, 1489,    0, 1494, 1498,    0, 1524,
     1519, 1529, 1506, 1533,    0, 1534, 1533, 1535, 1553, 1554,
     2664, 1555,    0, 1556, 1557, 1571,    0, 1593, 1558,    0,
        0, 1553, 1564, 1567, 1597, 1551, 1568, 1560, 1587, 1601,
     1600, 1610, 1613,    0, 1585,    0, 1599, 1600, 1611, 1612,

     1613, 1614, 1626,    0, 1616, 1626,    0, 1609, 1622, 1602,
     1617, 1621, 1616,    0, 1617, 1662,    0,    0,    0,    0,
        0,    0, 1635, 1650, 1651, 1653,    0,    0, 2664,    0,
        0, 1645, 1667, 1668, 1648,    0, 1650, 1685, 1652,    0,
     1666, 1673, 1674, 2664, 1656, 1670, 1658, 1660, 1672, 1677,
     1665, 1679, 1679, 1671, 1690, 1691, 1692,    0, 1669, 1675,
     1676, 1671, 1692, 1680, 1675, 2664, 1695, 1683, 1678,    0,
     1703, 1704, 1705,    0, 1688, 1685, 1684, 1685, 2664, 1705,
     1687,    0, 1707, 1713, 1714, 1715,    0, 1698, 1693,    0,
     1713, 2664, 1714,    0, 1720, 1721, 1722, 1700,    0, 2664,

        0,    0, 1724, 1725,    0,    0, 1726, 1727, 1728, 1729,
     1730, 1731,    0, 1732, 1733, 2664, 1755, 1761, 1767, 1773,
     1779, 1782, 1785, 1788, 1791, 1794, 1797, 1800, 1803, 1806,
     1765, 1809, 1812, 1815, 1777, 1818, 1821, 1824, 1827, 1830,
     1833, 1836, 1839, 1786, 1843, 1845, 1851, 1854, 1857, 1860,
     1849, 1864, 1866, 1869, 1872, 1875, 1878, 1881, 1884, 1887,
     1888, 1891, 1894, 1897, 1900, 1901, 1904, 1907, 1910, 1913,
     1916, 1919, 1922, 1925, 1928, 1931, 1934, 1937, 1940, 1943,
     1946, 1949, 1952, 1955, 1958, 1961, 1964, 1967, 1970, 1973,
     1976, 1979, 1982, 1985, 1988, 1991, 1994, 1997, 2000, 2003,

     2006, 2009, 2012, 2015, 2018, 2021, 2024, 2027, 2030, 2033,
     2036, 2039, 2042, 2045, 2048, 2051, 2054, 2057, 2060, 2063,
     2066, 2069, 2072, 2078, 2084, 2087, 2090, 2093, 2096, 2102,
     2108, 2111, 2114, 2117, 2120, 2123, 2126, 2129, 2132, 2135,
     2138, 2141, 2144, 2147, 2150, 2153, 2156, 2159, 2162, 2165,
     2168, 2171, 2174, 2177
    } ;

static const flex_int16_t yy_def[1255] =
    {   0,
     1116,    1, 1117, 1117, 1116, 1116, 1116, 1116, 1116, 1118,
     1119, 1120, 1116, 1116,   14, 1116, 1116, 1116,   18,   19,
       18,   18,   18,   18,   18,   18,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19, 1116, 1116, 1116, 1116, 1116, 1118, 1116, 1119,
     1120, 1116, 1116, 1121, 1116, 1122,   55, 1116, 1123, 1116,
     1116,   19,   18,   19,   19,   19,   63,   63,   63,   19,
       19,   19,   19,   63,   19,   19,   63,   63,   19,   19,
       19,   19,   19,   19,   63,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19, 1116, 1121, 1116, 1124,  125, 1125, 1116, 1123,
     1116, 1126,   18,  133,  133,   19,   19,   19,   19,   19,
       19,  133,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19, 1116,  198, 1127,

     1128, 1129, 1116, 1130, 1131, 1116, 1116, 1132,  133,  209,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19, 1116,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,  198,  199, 1128, 1133, 1134, 1135,
     1116, 1116, 1136, 1131, 1116, 1137, 1116, 1138,  209,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19, 1116,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19, 1139, 1116, 1140, 1141,
     1135, 1116, 1142, 1116, 1143, 1144, 1145, 1116, 1116, 1116,
     1146,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19, 1147,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19, 1116, 1116,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19, 1148, 1149,
     1150, 1151, 1152, 1116, 1116, 1116, 1153, 1144, 1145, 1116,
     1154, 1116, 1155,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19, 1116,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19, 1116, 1116,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19, 1140, 1116, 1156, 1157,
     1151, 1152, 1116, 1158, 1116, 1159, 1160,  449, 1116, 1116,
     1116, 1161,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19, 1116,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19, 1116, 1116,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

     1162, 1163, 1164, 1165,  522, 1116, 1116, 1116, 1166, 1160,
     1116, 1167, 1116, 1168,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19, 1116,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19, 1116, 1116,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19, 1169, 1116, 1170, 1171, 1165,
     1116, 1172, 1116, 1173,  449, 1116, 1116, 1116, 1174,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19, 1116,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19, 1116, 1116,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19, 1156, 1175, 1176,  522, 1116, 1116, 1116, 1177,
     1116, 1178, 1116, 1179,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19, 1116,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19, 1116, 1116,   19,   19,   19,
       19,   19,   19,   19,   19, 1180, 1116, 1181, 1182, 1116,

     1183, 1116, 1184,  449, 1116, 1116, 1116, 1185,   19,   19,
       19,   19,   19,   19,   19,   19,   19, 1116,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19, 1186, 1187,
     1188,  522, 1116, 1116, 1116, 1189, 1116, 1190, 1116, 1191,
       19,   19,   19,   19,   19,   19,   19, 1116,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19, 1192, 1116, 1193, 1194, 1116, 1195, 1116,
     1196,  449, 1116, 1116, 1116, 1197,   19,   19,   19,   19,
       19, 1116,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19, 1198, 1199, 1200, 1201,  522,
     1116, 1116, 1116, 1202, 1116, 1203, 1116, 1204,   19,   19,
       19,   19, 1116, 1116,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19, 1205, 1116, 1206, 1116,
     1207, 1116, 1208, 1116, 1209,  449, 1116, 1116, 1210, 1211,
       19,   19,   19, 1116, 1116,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19, 1212, 1213,
     1116, 1214, 1215,  522, 1116, 1116, 1216, 1116, 1217, 1218,
       19,   19,   19,   19,   19, 1116, 1116,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19, 1219, 1116,

     1220, 1221, 1116, 1222,  449, 1116, 1223,   19,   19,   19,
       19,   19, 1116, 1224,   19, 1225,   19,   19,   19,   19,
       19,   19,   19, 1226, 1116, 1227, 1228,  522, 1116, 1229,
       19,   19,   19,   19,   19, 1230, 1116, 1231,   19,   19,
     1232, 1233, 1234, 1116,   19,   19,   19,   19, 1116, 1116,
     1116,   19,   19,   19, 1235, 1116, 1236, 1237,   19,   19,
       19,   19, 1116, 1116, 1116, 1116,   19,   19,   19,   19,
     1238, 1239, 1240,   19,   19,   19,   19, 1116, 1116, 1116,
       19,   19,   19, 1241, 1116, 1242, 1243,   19,   19,   19,
     1116, 1116,   19,   19, 1244, 1245, 1246,   19,   19, 1116,

       19, 1247, 1116, 1248, 1249,   19, 1116, 1250, 1251, 1244,
     1116, 1252, 1253, 1254, 1116,    0, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,

     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116
    } ;

static const flex_int16_t yy_nxt[2717] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,    6,    6,    6,
        6,   13,   14,   15,   15,   15,   15,   15,   15,   15,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   19,   30,   31,   32,   33,
       34,   35,   19,   36,   37,   38,   39,   40,   41,   19,
       42,   19,   45,   46,   47,   46,   53,   65,   66,  729,
       54,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       56,   85,   57,   90,   74,   57,   57,   57,   57,   57,
       57,   91,   58,   67,   68,   75,   69,   86,   76,   93,
      394,   87,   70,  119,   71,   94,  395,  120,   59,   62,

       62,   72,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   56,  730,   63,   62,   62,   63,   63,   63,   63,
       63,   63,   62,   64,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62, 1116,  100,   62,  101,  731,   62,   62,   62,   62,
       62,   62,   96,   62,   77,   78,   97,   45,   46,   79,
       47,   46,   98,  732,   80,   81,  143,   99,   82,  102,
      103,   83,  106,  109,  144,  110,  107,  115,  111,  112,
      104,   45,   46,  105,  137,  116,  108,  266,  160,  138,

      113,  114,  267,  161,  117,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  126,  585,  127,  162,  733,  127,
      127,  127,  127,  127,  127,  586,   58,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  244,  245,  132,  291,  734,
      132,  132,  132,  132,  132,  132,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  126,  168,  133,  164,  292,
      133,  133,  133,  133,  133,  133,  165,  178,  187,  248,
      318,  169,  718,  735,  179,  719,  180,  181,  249,  319,
      320,  321,  250,  326,  345,  188,  198,  198,  198,  198,

      198,  198,  198,  198,  198,   56,  736,  199,  327,  346,
      199,  199,  199,  199,  199,  199,  737,   58,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  334,  205,  204,  738,
      335,  204,  204,  204,  204,  204,  204,  205,  207,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  207,  739,
      208,  740,  741,  208,  208,  208,  208,  208,  208,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  385,  742,
      209,  520,  386,  209,  209,  209,  209,  209,  209,  275,
      275,  275,  275,  275,  275,  275,  275,  275,   56,  520,

      276,  679,  129,  276,  276,  276,  276,  276,  276,  608,
       58,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      280,  501,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  282,  280,  283,  502,  749,  283,  283,  283,  283,
      283,  283,  205,  282,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  207,  531,  286,  531,  688,  286,  286,
      286,  286,  286,  286,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  755,  756,  288,  757,  758,  288,  288,
      288,  288,  288,  288,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  759,  205,  289,  760,  761,  289,  289,

      289,  289,  289,  289,  280, 1116,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  282,  762,  363,  763,  764,
      363,  363,  363,  363,  363,  363,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  765,  280,  365,  766,  767,
      365,  365,  365,  365,  365,  365,  205, 1116,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  207,  768,  368,
      769,  770,  368,  368,  368,  368,  368,  368,  205,  771,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  370,
      376,  371,  772,  409,  371,  371,  371,  371,  371,  371,
      773,  533,  377,  774,  534,  378,  775,  379,  410,  280,

      535,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      282,  776,  444,  777,  778,  444,  444,  444,  444,  444,
      444,  280,  779,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  446,  780,  447,  781,  782,  447,  447,  447,
      447,  447,  447,  205,  783,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  370,  784,  451,  785,  786,  451,
      451,  451,  451,  451,  451,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  787,  788,  453,  789,  790,  453,
      453,  453,  453,  453,  453,  465,  465,  542,  465,  465,
      465,  465,  465,  465,  466,  791,  465,  644,  645,  646,

      792,  647,  543,  544,  793,  794,  465,  465,  280,  795,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  446,
      796,  524,  679,  799,  524,  524,  524,  524,  524,  524,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  608,
      608,  526,  749,  688,  526,  526,  526,  526,  526,  526,
      205,  807,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  370,  809,  529,  810,  811,  529,  529,  529,  529,
      529,  529,  205,  812,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  531,  549,  532,  813,  814,  532,  532,
      532,  532,  532,  532,  550,  815,  554,  816,  817,  818,

      819,  820,  555,  551,  556,  280,  821,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  446,  822,  606,  823,
      824,  606,  606,  606,  606,  606,  606,  280,  825,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  608,  826,
      609,  827,  828,  609,  609,  609,  609,  609,  609,  205,
      829,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      531,  830,  612,  831,  832,  612,  612,  612,  612,  612,
      612,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      833,  834,  614,  835,  836,  614,  614,  614,  614,  614,
      614,  280,  837,  681,  681,  681,  681,  681,  681,  681,

      681,  681,  608,  838,  682,  129,  679,  682,  682,  682,
      682,  682,  682,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  799,  129,  684,  749,  845,  684,  684,  684,
      684,  684,  684,  205,  688,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  531,  688,  686,  807,  851,  686,
      686,  686,  686,  686,  686,  205,  852,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  688,  853,  689,  854,
      855,  689,  689,  689,  689,  689,  689,  280,  856,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  608,  857,
      747,  858,  859,  747,  747,  747,  747,  747,  747,  280,

      860,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      749,  861,  750,  864,  865,  750,  750,  750,  750,  750,
      750,  205,  866,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  688,  867,  752,  868,  869,  752,  752,  752,
      752,  752,  752,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  870,  871,  754,  872,  873,  754,  754,  754,
      754,  754,  754,  280,  679,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  749,  799,  801,  877,  749,  801,
      801,  801,  801,  801,  801,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  749,  845,  803,  807,  885,  803,

      803,  803,  803,  803,  803,  205,  887,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  688,  888,  805,  889,
      890,  805,  805,  805,  805,  805,  805,  205,  891,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  807,  892,
      808,  893,  894,  808,  808,  808,  808,  808,  808,  280,
      895,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      749,  896,  843,  897,  898,  843,  843,  843,  843,  843,
      843,  280,  899,  844,  844,  844,  844,  844,  844,  844,
      844,  844,  845,  900,  846,  901,  902,  846,  846,  846,
      846,  846,  846,  205,  903,  847,  847,  847,  847,  847,

      847,  847,  847,  847,  807,  904,  848,  905,  906,  848,
      848,  848,  848,  848,  848,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  799,  877,  850,  909,  845,  850,
      850,  850,  850,  850,  850,  862,  913,  807,  807,  885,
      919,  863,  280,  920,  878,  878,  878,  878,  878,  878,
      878,  878,  878,  845,  921,  879,  922,  923,  879,  879,
      879,  879,  879,  879,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  924,  925,  881,  928,  929,  881,  881,
      881,  881,  881,  881,  205,  930,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  807,  931,  883,  932,  933,

      883,  883,  883,  883,  883,  883,  205,  934,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  885,  935,  886,
      936,  129,  886,  886,  886,  886,  886,  886,  280,  877,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  845,
      940,  911,  845,  845,  911,  911,  911,  911,  911,  911,
      280,  913,  912,  912,  912,  912,  912,  912,  912,  912,
      912,  913,  885,  914,  949,  951,  914,  914,  914,  914,
      914,  914,  205,  952,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  885,  953,  916,  954,  926,  916,  916,
      916,  916,  916,  916,  917,  917,  917,  917,  917,  917,

      917,  917,  917,  927,  955,  918,  956,  957,  918,  918,
      918,  918,  918,  918,  280,  958,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  913,  963,  943,  964,  965,
      943,  943,  943,  943,  943,  943,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  966,  967,  945,  968,  799,
      945,  945,  945,  945,  945,  945,  205,  877,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  885,  940,  947,
      971,  973,  947,  947,  947,  947,  947,  947,  205,  913,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  949,
      885,  950,  885,  949,  950,  950,  950,  950,  950,  950,

      959,  960,  961,  981,  962,  280,  982,  974,  974,  974,
      974,  974,  974,  974,  974,  974,  913,  986,  975,  987,
      988,  975,  975,  975,  975,  975,  975,  280,  989,  976,
      976,  976,  976,  976,  976,  976,  976,  976,  990,  992,
      977,  991,  993,  977,  977,  977,  977,  977,  977,  205,
      994,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      949,  983,  979,  995,  996,  979,  979,  979,  979,  979,
      979,  997,  998,  984,  999,  940,  973,  913,  913,  949,
      985,  280, 1008, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1009, 1010, 1004, 1013, 1014, 1004, 1004, 1004,

     1004, 1004, 1004,  205, 1015, 1005, 1005, 1005, 1005, 1005,
     1005, 1005, 1005, 1005,  949, 1016, 1006, 1017, 1018, 1006,
     1006, 1006, 1006, 1006, 1006, 1011, 1019, 1020, 1021, 1022,
     1023, 1012,  129,  940,  973, 1027,  280,  949, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028,  949, 1031, 1029,
     1032, 1033, 1029, 1029, 1029, 1029, 1029, 1029, 1034, 1035,
     1036, 1038, 1037, 1037, 1040, 1037, 1037, 1037, 1037, 1037,
     1037,  877,  973, 1037, 1027, 1045, 1046, 1047, 1048, 1050,
     1051, 1053, 1054, 1037, 1037, 1049, 1049, 1055, 1049, 1049,
     1049, 1049, 1049, 1049, 1027, 1058, 1049, 1059, 1060, 1061,

     1062, 1063, 1064, 1065, 1066, 1069, 1049, 1049, 1067, 1068,
     1070,  909, 1027, 1058, 1074, 1075, 1076, 1077, 1078, 1079,
     1080, 1081, 1082, 1083,  940, 1058, 1087, 1088, 1089, 1090,
     1091, 1092, 1093, 1094, 1095, 1058, 1087, 1098, 1099, 1100,
     1101,  971, 1087, 1105, 1106, 1087, 1105, 1110, 1105, 1113,
     1116, 1105, 1113, 1113, 1113,   43,   43,   43,   43,   43,
       43,   48,   48,   48,   48,   48,   48,   50,  284,   50,
       50,   50,   50,   51,   51,   51,   51,   51,   51,  124,
      361,  124,  124,  124,  124,  128,  128,  128,  130,  448,
      130,  200,  200,  200,  201,  201,  201,  208,  208,  208,

      277,  277,  277,  278,  278,  278,  279,  279,  279,  283,
      283,  283,  286,  286,  286,  358,  358,  358,  359,  359,
      359,  363,  363,  363,  368,  368,  368,  371,  371,  371,
      439,  439,  439,  440,  440,  440,  441,  441,  441,  444,
      444,  444,  447,  447,  447,  449,  449,  449,  451,  451,
      451,  467,  521,  467,  467,  467,  467,  517,  517,  517,
      518,  518,  518,  519,  519,  519,  522,  522,  522,  524,
      524,  524,  529,  529,  529,  532,  532,  532,  602,  602,
      602,  603,  603,  603,  606,  606,  606,  609,  609,  609,
      610,  612,  612,  612,  676,  676,  676,  677,  677,  677,

      678,  678,  678,  680,  682,  682,  682,  686,  686,  686,
      689,  689,  689,  743,  743,  743,  744,  744,  744,  745,
      745,  745,  747,  747,  747,  750,  750,  750,  752,  752,
      752,  797,  797,  797,  798,  798,  798,  801,  801,  801,
      805,  805,  805,  808,  808,  808,  839,  839,  839,  840,
      840,  840,  841,  841,  841,  843,  843,  843,  846,  846,
      846,  848,  848,  848,  874,  874,  874,  875,  875,  875,
      876,  876,  876,  879,  879,  879,  883,  883,  883,  886,
      886,  886,  744,  744,  744,  907,  907,  907,  908,  908,
      908,  911,  911,  911,  914,  914,  914,  916,  916,  916,

      937,  937,  937,  938,  938,  938,  939,  939,  939,  941,
      728,  941,  943,  943,  943,  947,  947,  947,  950,  950,
      950,  969,  969,  969,  970,  970,  970,  972,  972,  972,
      975,  975,  975,  977,  727,  977,  980,  726,  980,  979,
      979,  979,  840,  840,  840, 1000, 1000, 1000, 1001, 1001,
     1001, 1002,  725, 1002, 1004,  724, 1004, 1006, 1006, 1006,
     1007,  723, 1007, 1024, 1024, 1024, 1025, 1025, 1025, 1026,
     1026, 1026, 1029,  722, 1029, 1030,  721, 1030, 1037,  720,
     1037, 1037, 1037, 1037, 1039,  717, 1039, 1039, 1039, 1039,
     1041, 1041, 1041, 1042, 1042, 1042, 1043,  716, 1043, 1044,

      715, 1044, 1049,  714, 1049, 1049, 1049, 1049, 1052,  713,
     1052, 1052, 1052, 1052,  907,  907,  907, 1056, 1056, 1056,
     1057, 1057, 1057, 1071, 1071, 1071, 1072, 1072, 1072, 1073,
      712, 1073, 1084, 1084, 1084, 1085, 1085, 1085, 1086, 1086,
     1086,  970,  970,  970, 1096, 1096, 1096, 1097,  711, 1097,
     1102, 1102, 1102, 1103, 1103, 1103, 1104, 1104, 1104, 1107,
      710, 1107, 1108, 1108, 1108, 1109,  709, 1109, 1111, 1111,
     1111, 1112, 1112, 1112, 1114, 1114, 1114,  945,  708,  945,
     1115, 1115, 1115,  707,  706,  705,  704,  703,  702,  701,
      700,  699,  698,  697,  696,  695,  694,  693,  692,  691,

      690,  688,  531,  608,  446,  446,  679,  520,  129,  675,
      674,  673,  672,  671,  670,  669,  668,  667,  666,  665,
      664,  663,  662,  661,  660,  659,  658,  657,  656,  655,
      654,  653,  652,  651,  650,  649,  648,  643,  642,  641,
      640,  639,  638,  637,  636,  635,  634,  633,  632,  631,
      630,  629,  628,  627,  626,  625,  624,  623,  622,  621,
      620,  619,  618,  617,  616,  615,  531,  370,  370,  608,
      446,  604,  129,  520,  360,  601,  600,  599,  598,  597,
      596,  595,  594,  593,  592,  591,  590,  589,  588,  587,
      584,  583,  582,  581,  580,  579,  578,  577,  576,  575,

      574,  573,  572,  571,  570,  569,  568,  567,  566,  565,
      564,  563,  562,  561,  560,  559,  558,  557,  553,  552,
      551,  548,  547,  546,  545,  541,  540,  539,  538,  537,
      536,  531,  370,  527,  446,  282,  520,  360,  360,  516,
      515,  514,  513,  512,  511,  510,  509,  508,  507,  506,
      505,  504,  503,  500,  499,  498,  497,  496,  495,  494,
      493,  492,  491,  490,  489,  488,  487,  486,  485,  484,
      483,  482,  481,  480,  479,  478,  477,  476,  475,  474,
      473,  472,  471,  470,  469,  468,  464,  463,  462,  461,
      460,  459,  458,  457,  456,  455,  454,  370,  207,  446,

      282,  442,  129,  360,  202,  129,  438,  437,  436,  435,
      434,  433,  432,  431,  430,  429,  428,  427,  426,  425,
      424,  423,  422,  421,  420,  419,  418,  417,  416,  415,
      414,  413,  412,  411,  408,  407,  406,  405,  404,  403,
      402,  401,  400,  399,  398,  397,  396,  393,  392,  391,
      390,  389,  388,  387,  384,  383,  382,  381,  380,  375,
      374,  373,  372, 1116,  370,  207,  366,  282,  360,  202,
      357, 1116, 1116,  356,  355,  354,  353,  352,  351,  350,
      349,  348,  347,  344,  343,  342,  341,  340,  339,  338,
      337,  336,  333,  332,  331,  330,  329,  328,  325,  324,

      323,  322,  317,  316,  315,  314,  313,  312,  311,  310,
      309,  308,  307,  306,  305,  304,  303,  302,  301,  300,
      299,  298,  297,  296,  295,  294,  293,  290,  207,  282,
      129,  202,  202,  274,  273,  272,  271,  270,  269,  268,
      265,  264,  263,  262,  261,  260,  259,  258,  257,  256,
      255,  254,  253,  252,  251,  247,  246,  243,  242,  241,
      240,  239,  238,  237,  236,  235,  234,  233,  232,  231,
      230,  229,  228,  227,  226,  225,  224,  223,  222,  221,
      220,  219,  218,  217,  216,  215,  214,  213,  212,  211,
      210,  207,  202,  129,  197,  196,  195,  194,  193,  192,

      191,  190,  189,  186,  185,  184,  183,  182,  177,  176,
      175,  174,  173,  172,  171,  170,  167,  166,  163,  159,
      158,  157,  156,  155,  154,  153,  152,  151,  150,  149,
      148,  147,  146,  145,  142,  141,  140,  139,  136,  135,
      134,  129,   51,   52,   49,  123,  122,  121,  118,   95,
       92,   89,   88,   84,   73,   61,   60, 1116,   52,   49,
     1116,   44,   44,    5, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,

     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116
    } ;

static const flex_int16_t yy_chk[2717] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    8,    8,    9,    9,   13,   20,   20,  657,
       13,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   26,   14,   29,   23,   14,   14,   14,   14,   14,
       14,   29,   14,   21,   21,   23,   21,   26,   23,   31,
      311,   26,   21,   40,   21,   31,  311,   40,   14,   18,

       18,   21,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,  658,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   34,   19,   34,  659,   19,   19,   19,   19,
       19,   19,   33,   19,   24,   24,   33,   45,   45,   24,
       46,   46,   33,  661,   24,   24,   75,   33,   24,   35,
       35,   24,   36,   37,   75,   37,   36,   38,   37,   37,
       35,   47,   47,   35,   70,   38,   36,  189,   91,   70,

       37,   37,  189,   91,   38,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,  501,   55,   91,  662,   55,
       55,   55,   55,   55,   55,  501,   55,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   60,   60,   60,   60,
       60,   60,   60,   60,   60,  170,  170,   60,  211,  663,
       60,   60,   60,   60,   60,   60,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   96,   63,   93,  211,
       63,   63,   63,   63,   63,   63,   93,  107,  113,  173,
      240,   96,  645,  664,  107,  645,  107,  107,  173,  240,
      240,  240,  173,  245,  263,  113,  125,  125,  125,  125,

      125,  125,  125,  125,  125,  125,  665,  125,  245,  263,
      125,  125,  125,  125,  125,  125,  666,  125,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  253,  367,  129,  667,
      253,  129,  129,  129,  129,  129,  129,  131,  367,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  669,
      131,  670,  674,  131,  131,  131,  131,  131,  131,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  301,  675,
      133,  676,  301,  133,  133,  133,  133,  133,  133,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  677,

      198,  678,  679,  198,  198,  198,  198,  198,  198,  682,
      198,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      203,  419,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  443,  203,  419,  684,  203,  203,  203,  203,
      203,  203,  206,  443,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  685,  206,  686,  689,  206,  206,
      206,  206,  206,  206,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  690,  691,  207,  692,  693,  207,  207,
      207,  207,  207,  207,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  694,  449,  209,  695,  696,  209,  209,

      209,  209,  209,  209,  281,  449,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  697,  281,  699,  700,
      281,  281,  281,  281,  281,  281,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  701,  522,  282,  703,  704,
      282,  282,  282,  282,  282,  282,  285,  522,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  705,  285,
      706,  707,  285,  285,  285,  285,  285,  285,  287,  708,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      295,  287,  709,  325,  287,  287,  287,  287,  287,  287,
      710,  454,  295,  711,  454,  295,  712,  295,  325,  362,

      454,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  714,  362,  715,  716,  362,  362,  362,  362,  362,
      362,  364,  718,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  719,  364,  720,  721,  364,  364,  364,
      364,  364,  364,  369,  722,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  723,  369,  724,  727,  369,
      369,  369,  369,  369,  369,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  728,  732,  370,  733,  735,  370,
      370,  370,  370,  370,  370,  383,  383,  461,  383,  383,
      383,  383,  383,  383,  383,  736,  383,  563,  563,  563,

      737,  563,  461,  461,  738,  741,  383,  383,  445,  742,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      743,  445,  744,  745,  445,  445,  445,  445,  445,  445,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  746,
      747,  446,  750,  752,  446,  446,  446,  446,  446,  446,
      450,  754,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  755,  450,  757,  759,  450,  450,  450,  450,
      450,  450,  452,  760,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  466,  452,  761,  762,  452,  452,
      452,  452,  452,  452,  466,  764,  471,  765,  766,  767,

      768,  769,  471,  466,  471,  523,  770,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  771,  523,  772,
      773,  523,  523,  523,  523,  523,  523,  525,  775,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  776,
      525,  777,  778,  525,  525,  525,  525,  525,  525,  530,
      783,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  784,  530,  785,  788,  530,  530,  530,  530,  530,
      530,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      789,  790,  531,  791,  792,  531,  531,  531,  531,  531,
      531,  607,  793,  607,  607,  607,  607,  607,  607,  607,

      607,  607,  607,  794,  607,  796,  797,  607,  607,  607,
      607,  607,  607,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  798,  799,  608,  801,  803,  608,  608,  608,
      608,  608,  608,  611,  804,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  805,  611,  808,  809,  611,
      611,  611,  611,  611,  611,  613,  810,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  812,  613,  814,
      815,  613,  613,  613,  613,  613,  613,  681,  816,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  817,
      681,  818,  820,  681,  681,  681,  681,  681,  681,  683,

      821,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  822,  683,  828,  829,  683,  683,  683,  683,  683,
      683,  687,  830,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  831,  687,  832,  833,  687,  687,  687,
      687,  687,  687,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  834,  836,  688,  837,  838,  688,  688,  688,
      688,  688,  688,  748,  839,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  840,  748,  841,  842,  748,
      748,  748,  748,  748,  748,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  843,  846,  749,  848,  850,  749,

      749,  749,  749,  749,  749,  751,  851,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  852,  751,  853,
      856,  751,  751,  751,  751,  751,  751,  753,  857,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  858,
      753,  859,  860,  753,  753,  753,  753,  753,  753,  800,
      862,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  863,  800,  864,  865,  800,  800,  800,  800,  800,
      800,  802,  867,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  868,  802,  869,  870,  802,  802,  802,
      802,  802,  802,  806,  871,  806,  806,  806,  806,  806,

      806,  806,  806,  806,  806,  872,  806,  873,  874,  806,
      806,  806,  806,  806,  806,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  875,  876,  807,  877,  879,  807,
      807,  807,  807,  807,  807,  824,  881,  882,  883,  886,
      887,  824,  844,  888,  844,  844,  844,  844,  844,  844,
      844,  844,  844,  844,  890,  844,  891,  892,  844,  844,
      844,  844,  844,  844,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  892,  893,  845,  895,  896,  845,  845,
      845,  845,  845,  845,  847,  897,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  898,  847,  899,  900,

      847,  847,  847,  847,  847,  847,  849,  901,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  902,  849,
      903,  906,  849,  849,  849,  849,  849,  849,  878,  907,
      878,  878,  878,  878,  878,  878,  878,  878,  878,  878,
      908,  878,  910,  911,  878,  878,  878,  878,  878,  878,
      880,  914,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  916,  880,  918,  919,  880,  880,  880,  880,
      880,  880,  884,  920,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  921,  884,  923,  894,  884,  884,
      884,  884,  884,  884,  885,  885,  885,  885,  885,  885,

      885,  885,  885,  894,  924,  885,  925,  926,  885,  885,
      885,  885,  885,  885,  912,  927,  912,  912,  912,  912,
      912,  912,  912,  912,  912,  912,  930,  912,  932,  933,
      912,  912,  912,  912,  912,  912,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  934,  935,  913,  936,  937,
      913,  913,  913,  913,  913,  913,  915,  938,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  939,  915,
      940,  941,  915,  915,  915,  915,  915,  915,  917,  943,
      917,  917,  917,  917,  917,  917,  917,  917,  917,  917,
      946,  917,  947,  950,  917,  917,  917,  917,  917,  917,

      929,  929,  929,  951,  929,  942,  952,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  954,  942,  955,
      957,  942,  942,  942,  942,  942,  942,  944,  958,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  960,  961,
      944,  960,  962,  944,  944,  944,  944,  944,  944,  948,
      963,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  953,  948,  964,  966,  948,  948,  948,  948,  948,
      948,  967,  968,  953,  969,  970,  972,  974,  975,  979,
      953,  976,  982,  976,  976,  976,  976,  976,  976,  976,
      976,  976,  983,  984,  976,  986,  987,  976,  976,  976,

      976,  976,  976,  978,  988,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  989,  978,  990,  991,  978,
      978,  978,  978,  978,  978,  985,  992,  993,  995,  997,
      998,  985,  999, 1000, 1001, 1002, 1003, 1005, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1006, 1008, 1003,
     1009, 1010, 1003, 1003, 1003, 1003, 1003, 1003, 1011, 1012,
     1013, 1015, 1016, 1016, 1023, 1016, 1016, 1016, 1016, 1016,
     1016, 1024, 1025, 1016, 1026, 1032, 1033, 1034, 1035, 1037,
     1037, 1039, 1039, 1016, 1016, 1038, 1038, 1041, 1038, 1038,
     1038, 1038, 1038, 1038, 1042, 1043, 1038, 1045, 1046, 1047,

     1048, 1049, 1049, 1050, 1051, 1053, 1038, 1038, 1052, 1052,
     1054, 1055, 1056, 1057, 1059, 1060, 1061, 1062, 1063, 1064,
     1065, 1067, 1068, 1069, 1071, 1072, 1073, 1075, 1076, 1077,
     1078, 1080, 1081, 1083, 1084, 1085, 1086, 1088, 1089, 1091,
     1093, 1095, 1096, 1097, 1098, 1103, 1104, 1107, 1108, 1109,
     1110, 1111, 1112, 1114, 1115, 1117, 1117, 1117, 1117, 1117,
     1117, 1118, 1118, 1118, 1118, 1118, 1118, 1119, 1131, 1119,
     1119, 1119, 1119, 1120, 1120, 1120, 1120, 1120, 1120, 1121,
     1135, 1121, 1121, 1121, 1121, 1122, 1122, 1122, 1123, 1144,
     1123, 1124, 1124, 1124, 1125, 1125, 1125, 1126, 1126, 1126,

     1127, 1127, 1127, 1128, 1128, 1128, 1129, 1129, 1129, 1130,
     1130, 1130, 1132, 1132, 1132, 1133, 1133, 1133, 1134, 1134,
     1134, 1136, 1136, 1136, 1137, 1137, 1137, 1138, 1138, 1138,
     1139, 1139, 1139, 1140, 1140, 1140, 1141, 1141, 1141, 1142,
     1142, 1142, 1143, 1143, 1143, 1145, 1145, 1145, 1146, 1146,
     1146, 1147, 1151, 1147, 1147, 1147, 1147, 1148, 1148, 1148,
     1149, 1149, 1149, 1150, 1150, 1150, 1152, 1152, 1152, 1153,
     1153, 1153, 1154, 1154, 1154, 1155, 1155, 1155, 1156, 1156,
     1156, 1157, 1157, 1157, 1158, 1158, 1158, 1159, 1159, 1159,
     1160, 1161, 1161, 1161, 1162, 1162, 1162, 1163, 1163, 1163,

     1164, 1164, 1164, 1165, 1166, 1166, 1166, 1167, 1167, 1167,
     1168, 1168, 1168, 1169, 1169, 1169, 1170, 1170, 1170, 1171,
     1171, 1171, 1172, 1172, 1172, 1173, 1173, 1173, 1174, 1174,
     1174, 1175, 1175, 1175, 1176, 1176, 1176, 1177, 1177, 1177,
     1178, 1178, 1178, 1179, 1179, 1179, 1180, 1180, 1180, 1181,
     1181, 1181, 1182, 1182, 1182, 1183, 1183, 1183, 1184, 1184,
     1184, 1185, 1185, 1185, 1186, 1186, 1186, 1187, 1187, 1187,
     1188, 1188, 1188, 1189, 1189, 1189, 1190, 1190, 1190, 1191,
     1191, 1191, 1192, 1192, 1192, 1193, 1193, 1193, 1194, 1194,
     1194, 1195, 1195, 1195, 1196, 1196, 1196, 1197, 1197, 1197,

     1198, 1198, 1198, 1199, 1199, 1199, 1200, 1200, 1200, 1201,
      656, 1201, 1202, 1202, 1202, 1203, 1203, 1203, 1204, 1204,
     1204, 1205, 1205, 1205, 1206, 1206, 1206, 1207, 1207, 1207,
     1208, 1208, 1208, 1209,  655, 1209, 1210,  652, 1210, 1211,
     1211, 1211, 1212, 1212, 1212, 1213, 1213, 1213, 1214, 1214,
     1214, 1215,  651, 1215, 1216,  650, 1216, 1217, 1217, 1217,
     1218,  649, 1218, 1219, 1219, 1219, 1220, 1220, 1220, 1221,
     1221, 1221, 1222,  648, 1222, 1223,  647, 1223, 1224,  646,
     1224, 1224, 1224, 1224, 1225,  643, 1225, 1225, 1225, 1225,
     1226, 1226, 1226, 1227, 1227, 1227, 1228,  642, 1228, 1229,

      641, 1229, 1230,  640, 1230, 1230, 1230, 1230, 1231,  639,
     1231, 1231, 1231, 1231, 1232, 1232, 1232, 1233, 1233, 1233,
     1234, 1234, 1234, 1235, 1235, 1235, 1236, 1236, 1236, 1237,
      638, 1237, 1238, 1238, 1238, 1239, 1239, 1239, 1240, 1240,
     1240, 1241, 1241, 1241, 1242, 1242, 1242, 1243,  637, 1243,
     1244, 1244, 1244, 1245, 1245, 1245, 1246, 1246, 1246, 1247,
      636, 1247, 1248, 1248, 1248, 1249,  635, 1249, 1250, 1250,
     1250, 1251, 1251, 1251, 1252, 1252, 1252, 1253,  634, 1253,
     1254, 1254, 1254,  633,  632,  631,  630,  629,  628,  627,
      626,  625,  624,  623,  622,  621,  619,  618,  617,  616,

      615,  614,  612,  609,  606,  605,  603,  602,  601,  599,
      598,  597,  595,  594,  593,  592,  591,  590,  589,  588,
      587,  586,  585,  584,  583,  581,  580,  579,  578,  577,
      575,  571,  570,  569,  567,  565,  564,  561,  560,  559,
      558,  557,  556,  555,  554,  553,  552,  551,  550,  549,
      548,  547,  546,  545,  544,  543,  542,  541,  540,  539,
      538,  537,  536,  535,  534,  533,  532,  529,  528,  526,
      524,  521,  520,  519,  518,  517,  516,  515,  514,  512,
      511,  510,  509,  508,  507,  506,  505,  504,  503,  502,
      500,  498,  497,  496,  495,  494,  493,  492,  491,  490,

      489,  488,  487,  486,  485,  484,  483,  482,  481,  480,
      479,  478,  477,  476,  475,  474,  473,  472,  470,  469,
      467,  465,  464,  463,  462,  460,  459,  458,  457,  456,
      455,  453,  451,  448,  447,  444,  441,  440,  439,  438,
      437,  436,  435,  434,  433,  432,  429,  428,  427,  424,
      423,  422,  421,  418,  417,  416,  415,  413,  412,  411,
      410,  409,  408,  407,  406,  405,  404,  403,  402,  401,
      400,  399,  398,  397,  396,  395,  394,  393,  392,  391,
      390,  388,  387,  386,  385,  384,  382,  381,  380,  379,
      378,  377,  376,  375,  374,  373,  372,  371,  368,  365,

      363,  361,  360,  359,  358,  357,  356,  355,  354,  353,
      352,  351,  350,  349,  348,  347,  346,  345,  343,  342,
      340,  338,  337,  336,  335,  334,  333,  332,  331,  330,
      329,  328,  327,  326,  324,  323,  322,  321,  320,  319,
      318,  317,  316,  315,  314,  313,  312,  310,  308,  306,
      305,  304,  303,  302,  300,  299,  298,  297,  296,  293,
      292,  291,  290,  289,  288,  286,  284,  283,  279,  278,
      277,  276,  275,  274,  273,  272,  271,  269,  268,  267,
      266,  265,  264,  262,  261,  260,  259,  258,  257,  256,
      255,  254,  251,  250,  249,  248,  247,  246,  244,  243,

      242,  241,  239,  238,  237,  236,  235,  234,  233,  232,
      231,  230,  229,  228,  226,  225,  224,  223,  221,  220,
      219,  218,  217,  216,  215,  214,  213,  210,  208,  204,
      202,  201,  200,  196,  195,  194,  193,  192,  191,  190,
      188,  187,  186,  185,  184,  183,  182,  181,  180,  179,
      178,  177,  176,  175,  174,  172,  171,  169,  168,  167,
      166,  165,  164,  162,  161,  160,  159,  158,  157,  156,
      155,  154,  153,  152,  151,  150,  149,  148,  147,  146,
      145,  144,  143,  142,  141,  140,  138,  137,  136,  135,
      134,  132,  128,  126,  122,  121,  120,  119,  118,  117,

      116,  115,  114,  112,  111,  110,  109,  108,  106,  105,
      104,  103,  102,  100,   99,   97,   95,   94,   92,   90,
       89,   88,   87,   86,   85,   84,   83,   82,   81,   80,
       79,   78,   77,   76,   74,   73,   72,   71,   69,   68,
       67,   56,   52,   51,   48,   44,   42,   41,   39,   32,
       30,   28,   27,   25,   22,   17,   16,   15,   12,   10,
        5,    4,    3, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,

     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[140] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
        };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static const flex_int16_t yy_rule_linenum[139] =
    {   0,
       60,   61,   63,   64,   65,   66,   67,   68,   69,   71,
       72,   73,   74,   76,   78,   79,   81,   82,   83,   84,
       85,   87,   88,   89,   90,   91,   92,   93,   94,   95,
       96,   97,   98,   99,  100,  101,  102,  104,  105,  106,
      107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
      117,  118,  119,  120,  121,  122,  123,  124,  125,  126,
      127,  128,  129,  130,  132,  133,  134,  136,  137,  138,
      139,  140,  141,  142,  143,  144,  145,  146,  147,  148,
      149,  150,  151,  152,  153,  154,  155,  156,  157,  158,
      159,  160,  161,  162,  163,  164,  165,  166,  167,  168,

      169,  170,  171,  172,  173,  174,  175,  176,  177,  178,
      179,  180,  181,  182,  183,  185,  186,  187,  188,  190,
      192,  194,  199,  200,  208,  217,  226,  235,  244,  253,
      262,  274,  284,  300,  331,  357,  368,  378
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "SrvLexer.l"
#line 2 "SrvLexer.l"

#include "SrvParserContext.h"

#ifdef WIN32
#define strncasecmp _strnicmp
#endif

using namespace std;

#include "SrvParser.h"
#include "Portable.h"
#include "Logger.h"
#define YYABORT SrvParserContext::fatal("")

/* duplicate default definition from flex. This makes cppcheck
   check for defined YY_FATAL_ERROR() go away. */
#define YY_FATAL_ERROR(msg) SrvParserContext::fatal(msg)

#undef yyterminate
#define yyterminate SrvParserContext::fatal("")

using namespace dibbler;

#line 1851 "SrvLexer.cpp"
#define YY_NO_INPUT 1

#line 49 "SrvLexer.l"
using namespace std;
unsigned ComBeg;    // line, in which comment begins
unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
unsigned RgtCnt;    // the same as above, but on the right side of '::'
unsigned pos;
 char tmp[16];

#line 1862 "SrvLexer.cpp"
#line 1863 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals ( void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 58 "SrvLexer.l"


#line 2145 "SrvLexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1117 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1116 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 139 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 139 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 140 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 60 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::make_IFACE_(driver.loc_); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::make_CLASS_(driver.loc_); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::make_TACLASS_(driver.loc_);  }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::make_STATELESS_(driver.loc_);  }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::make_RELAY_(driver.loc_);  }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::make_IFACE_ID_(driver.loc_);  }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "SrvLexer.l"
{ return SrvParser::make_IFACE_ID_ORDER_(driver.loc_);  }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::make_LOGNAME_(driver.loc_); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::make_LOGLEVEL_(driver.loc_); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::make_LOGMODE_(driver.loc_);  }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::make_LOGCOLORS_(driver.loc_);  }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::make_WORKDIR_(driver.loc_); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::make_ACCEPT_ONLY_(driver.loc_); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::make_REJECT_CLIENTS_(driver.loc_); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::make_T1_(driver.loc_); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::make_T2_(driver.loc_); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::make_PREF_TIME_(driver.loc_); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::make_PREF_TIME_(driver.loc_); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::make_VALID_TIME_(driver.loc_); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::make_DROP_UNICAST_(driver.loc_);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::make_UNICAST_(driver.loc_); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::make_PREFERENCE_(driver.loc_); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::make_POOL_(driver.loc_); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::make_SHARE_(driver.loc_); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::make_RAPID_COMMIT_(driver.loc_); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::make_IFACE_MAX_LEASE_(driver.loc_);  }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::make_CLASS_MAX_LEASE_(driver.loc_);  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::make_CLNT_MAX_LEASE_(driver.loc_);   }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::make_CLIENT_(driver.loc_);  }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::make_DUID_KEYWORD_(driver.loc_);  }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::make_REMOTE_ID_(driver.loc_);  }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::make_LINK_LOCAL_(driver.loc_);  }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::make_ADDRESS_(driver.loc_); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::make_PREFIX_(driver.loc_);  }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::make_GUESS_MODE_(driver.loc_);  }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::make_OPTION_(driver.loc_);  }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::make_DNS_SERVER_(driver.loc_); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::make_DOMAIN_(driver.loc_); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::make_NTP_SERVER_(driver.loc_); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::make_TIME_ZONE_(driver.loc_); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::make_SIP_SERVER_(driver.loc_);  }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::make_SIP_DOMAIN_(driver.loc_);  }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::make_NEXT_HOP_(driver.loc_);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::make_SUBNET_(driver.loc_);  }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::make_ROUTE_(driver.loc_);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::make_FQDN_(driver.loc_);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::make_INFINITE_(driver.loc_);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::make_ACCEPT_UNKNOWN_FQDN_(driver.loc_);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::make_FQDN_DDNS_ADDRESS_(driver.loc_);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::make_DDNS_PROTOCOL_(driver.loc_);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::make_DDNS_TIMEOUT_(driver.loc_);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::make_NIS_SERVER_(driver.loc_);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ return SrvParser::make_NIS_DOMAIN_(driver.loc_);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ return SrvParser::make_NISP_SERVER_(driver.loc_);  }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::make_NISP_DOMAIN_(driver.loc_);  }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ return SrvParser::make_LIFETIME_(driver.loc_);  }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ return SrvParser::make_CACHE_SIZE_(driver.loc_);  }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 126 "SrvLexer.l"
{ return SrvParser::make_PDCLASS_(driver.loc_);  }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::make_PD_LENGTH_(driver.loc_);  }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::make_PD_POOL_(driver.loc_); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::make_VENDOR_SPEC_(driver.loc_);  }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::make_SCRIPT_(driver.loc_);  }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::make_EXPERIMENTAL_(driver.loc_);  }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::make_ADDR_PARAMS_(driver.loc_);  }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
{ return SrvParser::make_REMOTE_AUTOCONF_NEIGHBORS_(driver.loc_);  }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{ return SrvParser::make_AFTR_(driver.loc_);  }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ return SrvParser::make_INACTIVE_MODE_(driver.loc_);  }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{ return SrvParser::make_ACCEPT_LEASEQUERY_(driver.loc_);  }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 139 "SrvLexer.l"
{ return SrvParser::make_BULKLQ_ACCEPT_(driver.loc_);  }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 140 "SrvLexer.l"
{ return SrvParser::make_BULKLQ_TCPPORT_(driver.loc_);  }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
{ return SrvParser::make_BULKLQ_MAX_CONNS_(driver.loc_);  }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
{ return SrvParser::make_BULKLQ_TIMEOUT_(driver.loc_);  }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 143 "SrvLexer.l"
{ return SrvParser::make_AUTH_PROTOCOL_(driver.loc_);  }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 144 "SrvLexer.l"
{ return SrvParser::make_AUTH_ALGORITHM_(driver.loc_);  }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
{ return SrvParser::make_AUTH_REPLAY_(driver.loc_); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 146 "SrvLexer.l"
{ return SrvParser::make_AUTH_REALM_(driver.loc_);  }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 147 "SrvLexer.l"
{ return SrvParser::make_AUTH_METHODS_(driver.loc_);  }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 148 "SrvLexer.l"
{ return SrvParser::make_AUTH_DROP_UNAUTH_(driver.loc_);  }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 149 "SrvLexer.l"
{ return SrvParser::make_DIGEST_NONE_(driver.loc_);  }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 150 "SrvLexer.l"
{ return SrvParser::make_DIGEST_PLAIN_(driver.loc_);  }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 151 "SrvLexer.l"
{ return SrvParser::make_DIGEST_HMAC_MD5_(driver.loc_);  }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 152 "SrvLexer.l"
{ return SrvParser::make_DIGEST_HMAC_MD5_(driver.loc_);  }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 153 "SrvLexer.l"
{ return SrvParser::make_DIGEST_HMAC_SHA1_(driver.loc_);  }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 154 "SrvLexer.l"
{ return SrvParser::make_DIGEST_HMAC_SHA1_(driver.loc_);  }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 155 "SrvLexer.l"
{ return SrvParser::make_DIGEST_HMAC_SHA224_(driver.loc_);  }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 156 "SrvLexer.l"
{ return SrvParser::make_DIGEST_HMAC_SHA224_(driver.loc_);  }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 157 "SrvLexer.l"
{ return SrvParser::make_DIGEST_HMAC_SHA256_(driver.loc_);  }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 158 "SrvLexer.l"
{ return SrvParser::make_DIGEST_HMAC_SHA256_(driver.loc_);  }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 159 "SrvLexer.l"
{ return SrvParser::make_DIGEST_HMAC_SHA384_(driver.loc_);  }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 160 "SrvLexer.l"
{ return SrvParser::make_DIGEST_HMAC_SHA384_(driver.loc_);  }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 161 "SrvLexer.l"
{ return SrvParser::make_DIGEST_HMAC_SHA512_(driver.loc_);  }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 162 "SrvLexer.l"
{ return SrvParser::make_DIGEST_HMAC_SHA512_(driver.loc_);  }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 163 "SrvLexer.l"
{ return SrvParser::make_KEY_(driver.loc_);  }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 164 "SrvLexer.l"
{ return SrvParser::make_SECRET_(driver.loc_);  }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 165 "SrvLexer.l"
{ return SrvParser::make_ALGORITHM_(driver.loc_);  }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 166 "SrvLexer.l"
{ return SrvParser::make_RECONFIGURE_ENABLED_(driver.loc_);  }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 167 "SrvLexer.l"
{ return SrvParser::make_FUDGE_(driver.loc_);  }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 168 "SrvLexer.l"
{ return SrvParser::make_CLIENT_CLASS_(driver.loc_);  }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 169 "SrvLexer.l"
{ return SrvParser::make_MATCH_IF_(driver.loc_);  }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 170 "SrvLexer.l"
{ return SrvParser::make_EQ_(driver.loc_);  }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 171 "SrvLexer.l"
{ return SrvParser::make_AND_(driver.loc_);  }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 172 "SrvLexer.l"
{ return SrvParser::make_OR_(driver.loc_);  }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 173 "SrvLexer.l"
{ return SrvParser::make_CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_(driver.loc_);  }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 174 "SrvLexer.l"
{ return SrvParser::make_CLIENT_VENDOR_SPEC_DATA_(driver.loc_);  }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 175 "SrvLexer.l"
{ return SrvParser::make_CLIENT_VENDOR_CLASS_EN_(driver.loc_);  }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 176 "SrvLexer.l"
{ return SrvParser::make_CLIENT_VENDOR_CLASS_DATA_(driver.loc_);  }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 177 "SrvLexer.l"
{ return SrvParser::make_ALLOW_(driver.loc_);  }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 178 "SrvLexer.l"
{ return SrvParser::make_DENY_(driver.loc_);  }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 179 "SrvLexer.l"
{ return SrvParser::make_SUBSTRING_(driver.loc_);  }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 180 "SrvLexer.l"
{ return SrvParser::make_CONTAIN_(driver.loc_);  }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 181 "SrvLexer.l"
{ return SrvParser::make_STRING_KEYWORD_(driver.loc_);  }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 182 "SrvLexer.l"
{ return SrvParser::make_ADDRESS_LIST_(driver.loc_);  }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 183 "SrvLexer.l"
{ return SrvParser::make_PERFORMANCE_MODE_(driver.loc_);  }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 185 "SrvLexer.l"
{ return SrvParser::make_INTNUMBER_(1, driver.loc_); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 186 "SrvLexer.l"
{ return SrvParser::make_INTNUMBER_(0, driver.loc_); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 187 "SrvLexer.l"
{ return SrvParser::make_INTNUMBER_(1, driver.loc_); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 188 "SrvLexer.l"
{ return SrvParser::make_INTNUMBER_(0, driver.loc_); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 190 "SrvLexer.l"
;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 192 "SrvLexer.l"
;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 194 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 199 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 200 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 201 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    YYABORT;
}
	YY_BREAK
 //IPv6 address - various forms

case 125:
YY_RULE_SETUP
#line 208 "SrvLexer.l"
{
    if(!inet_pton6(yytext, tmp)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::make_IPV6ADDR_(string(yytext), driver.loc_); 
    }
}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 217 "SrvLexer.l"
{
    if(!inet_pton6(yytext, tmp)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::make_IPV6ADDR_(string(yytext), driver.loc_); 
    }
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 226 "SrvLexer.l"
{
    if(!inet_pton6(yytext,tmp)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::make_IPV6ADDR_(string(yytext), driver.loc_); 
    }
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 235 "SrvLexer.l"
{
    if(!inet_pton6(yytext, tmp)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::make_IPV6ADDR_(string(yytext), driver.loc_); 
    }
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 244 "SrvLexer.l"
{
    if(!inet_pton6(yytext, tmp)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::make_IPV6ADDR_(string(yytext), driver.loc_); 
    }
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 253 "SrvLexer.l"
{
    if(!inet_pton6(yytext, tmp)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::make_IPV6ADDR_(string(yytext), driver.loc_); 
    }
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 262 "SrvLexer.l"
{
    if(!inet_pton6(yytext, tmp)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::make_IPV6ADDR_(string(yytext), driver.loc_); 
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 274 "SrvLexer.l"
{
    string str = "";
    if (strlen(yytext)) {
        str = string(yytext + 1);
    }
    str = str.substr(0, str.size() - 1);
    
    return SrvParser::make_STRING_(str, driver.loc_); 
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 284 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
	 ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       return SrvParser::make_INTNUMBER_(1, driver.loc_); 
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
	 ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       return SrvParser::make_INTNUMBER_(0, driver.loc_); 
    }

    return SrvParser::make_STRING_(string(yytext), driver.loc_); 
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 300 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
	yytext[1]='0'; //if odd then no-meaning zero at the beginning
	len = strlen(yytext)-1;
	ptr = yytext+1;
    } else {
	len = strlen(yytext)-2;
	ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    string duid(0, len >> 1);
    for (int i=0 ; i<len; i++)
    {
	duid[i>>1]<<=4;
	if (!isxdigit(ptr[i])) {
	     Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
	     YYABORT;
	}
	if (isalpha(ptr[i])) {
	    duid[i>>1] |= toupper(ptr[i])-'A'+10;
	} else {
	    duid[i>>1] |= ptr[i]-'0';
	}
   }
   return SrvParser::make_DUID_(duid, driver.loc_); 
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 331 "SrvLexer.l"
{
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   string duid(0, len);

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
	x = (toupper(*pos)-'A' + 10);
      else
	x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))
	x += (toupper(*(pos+1))-'A' + 10);
      else
	x += *(pos+1) - '0';
      duid[i] = x;
      i++;
   }

   return SrvParser::make_DUID_(duid, driver.loc_); 
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 357 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    int x = 0;
    if(!sscanf(yytext,"%20x",&x)) {
      Log(Crit) << "Hex value [" << yytext << "] parsing failed." << LogEnd;
      YYABORT;
    }
    return SrvParser::make_HEXNUMBER_(x, driver.loc_); 
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 368 "SrvLexer.l"
{
    // DECIMAL NUMBER
    int x = 0;
    if(!sscanf(yytext,"%20u",&x)) {
	Log(Crit) << "Decimal value [" << yytext << "] parsing failed." << LogEnd;
	YYABORT;
    }
    return SrvParser::make_INTNUMBER_(x, driver.loc_); 
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 378 "SrvLexer.l"
{ driver.error(driver.loc_, "Invalid character: " +std::string(yytext)); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 381 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 3084 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1117 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1117 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1116);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */
	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 381 "SrvLexer.l"


